{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "from matplotlib import pyplot as plt\n",
    "import datetime"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [],
   "source": [
    "df=pd.read_csv('total-cases-covid-19.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{0: 'Seychelles',\n",
       " 1: 'Maldives',\n",
       " 2: 'Italy',\n",
       " 3: 'Poland',\n",
       " 4: 'South America',\n",
       " 5: 'India',\n",
       " 6: 'Kyrgyzstan',\n",
       " 7: 'Ghana',\n",
       " 8: 'Northern Mariana Islands',\n",
       " 9: 'Swaziland',\n",
       " 10: 'Turks and Caicos Islands',\n",
       " 11: 'Senegal',\n",
       " 12: 'Benin',\n",
       " 13: 'Tanzania',\n",
       " 14: 'Switzerland',\n",
       " 15: 'Mali',\n",
       " 16: 'Saint Lucia',\n",
       " 17: 'Sao Tome and Principe',\n",
       " 18: 'Ukraine',\n",
       " 19: 'Guyana',\n",
       " 20: 'Malaysia',\n",
       " 21: 'Uruguay',\n",
       " 22: 'Germany',\n",
       " 23: 'Kosovo',\n",
       " 24: 'United Arab Emirates',\n",
       " 25: 'Liechtenstein',\n",
       " 26: 'South Korea',\n",
       " 27: 'Iraq',\n",
       " 28: 'Anguilla',\n",
       " 29: 'Bosnia and Herzegovina',\n",
       " 30: 'Montserrat',\n",
       " 31: 'Trinidad and Tobago',\n",
       " 32: 'Vietnam',\n",
       " 33: 'Central African Republic',\n",
       " 34: 'Belgium',\n",
       " 35: 'Japan',\n",
       " 36: 'Nigeria',\n",
       " 37: 'Burkina Faso',\n",
       " 38: 'Armenia',\n",
       " 39: 'Kazakhstan',\n",
       " 40: 'Afghanistan',\n",
       " 41: 'Georgia',\n",
       " 42: 'New Caledonia',\n",
       " 43: 'Sudan',\n",
       " 44: 'Cameroon',\n",
       " 45: 'World',\n",
       " 46: 'China',\n",
       " 47: 'Serbia',\n",
       " 48: 'Argentina',\n",
       " 49: 'Angola',\n",
       " 50: 'Bahrain',\n",
       " 51: 'Macedonia',\n",
       " 52: 'Denmark',\n",
       " 53: 'Panama',\n",
       " 54: 'Russia',\n",
       " 55: 'United States',\n",
       " 56: 'Australia',\n",
       " 57: 'Luxembourg',\n",
       " 58: 'Iran',\n",
       " 59: 'Bulgaria',\n",
       " 60: 'Mexico',\n",
       " 61: 'Norway',\n",
       " 62: 'Finland',\n",
       " 63: 'Chad',\n",
       " 64: 'Colombia',\n",
       " 65: 'Saudi Arabia',\n",
       " 66: 'Sint Maarten (Dutch part)',\n",
       " 67: 'Venezuela',\n",
       " 68: 'Mozambique',\n",
       " 69: 'Greece',\n",
       " 70: 'Hungary',\n",
       " 71: 'Mongolia',\n",
       " 72: 'France',\n",
       " 73: 'Lower middle income',\n",
       " 74: 'United States Virgin Islands',\n",
       " 75: 'Spain',\n",
       " 76: 'Monaco',\n",
       " 77: 'Palestine',\n",
       " 78: 'Indonesia',\n",
       " 79: 'Ireland',\n",
       " 80: 'Gabon',\n",
       " 81: 'Montenegro',\n",
       " 82: 'Croatia',\n",
       " 83: 'Morocco',\n",
       " 84: 'Mauritius',\n",
       " 85: 'Brazil',\n",
       " 86: 'Nepal',\n",
       " 87: 'Syria',\n",
       " 88: 'Latvia',\n",
       " 89: 'Jamaica',\n",
       " 90: 'North America',\n",
       " 91: 'Niger',\n",
       " 92: 'Peru',\n",
       " 93: 'Portugal',\n",
       " 94: 'South Africa',\n",
       " 95: 'Iceland',\n",
       " 96: 'El Salvador',\n",
       " 97: 'Thailand',\n",
       " 98: 'Yemen',\n",
       " 99: 'Kuwait',\n",
       " 100: 'Papua New Guinea',\n",
       " 101: 'Somalia',\n",
       " 102: 'Timor',\n",
       " 103: 'Cuba',\n",
       " 104: 'Vatican',\n",
       " 105: 'Guinea',\n",
       " 106: 'Bangladesh',\n",
       " 107: 'Oceania',\n",
       " 108: 'Lebanon',\n",
       " 109: 'Saint Vincent and the Grenadines',\n",
       " 110: 'Romania',\n",
       " 111: 'World excl. China',\n",
       " 112: 'United Kingdom',\n",
       " 113: 'Saint Kitts and Nevis',\n",
       " 114: 'Barbados',\n",
       " 115: 'Brunei',\n",
       " 116: 'Laos',\n",
       " 117: 'Namibia',\n",
       " 118: 'Netherlands',\n",
       " 119: 'Myanmar',\n",
       " 120: 'Chile',\n",
       " 121: 'Bahamas',\n",
       " 122: 'Qatar',\n",
       " 123: 'Haiti',\n",
       " 124: 'Sri Lanka',\n",
       " 125: 'Belarus',\n",
       " 126: 'Uganda',\n",
       " 127: 'Cambodia',\n",
       " 128: 'Philippines',\n",
       " 129: 'Albania',\n",
       " 130: 'Bhutan',\n",
       " 131: 'Fiji',\n",
       " 132: 'Slovakia',\n",
       " 133: 'Togo',\n",
       " 134: 'Taiwan',\n",
       " 135: 'Uzbekistan',\n",
       " 136: 'Sweden',\n",
       " 137: 'Mauritania',\n",
       " 138: 'Moldova',\n",
       " 139: 'Jersey',\n",
       " 140: 'Algeria',\n",
       " 141: 'Andorra',\n",
       " 142: 'New Zealand',\n",
       " 143: 'Honduras',\n",
       " 144: 'Oman',\n",
       " 145: 'Azerbaijan',\n",
       " 146: 'Lithuania',\n",
       " 147: \"Cote d'Ivoire\",\n",
       " 148: 'Jordan',\n",
       " 149: 'Ethiopia',\n",
       " 150: 'Paraguay',\n",
       " 151: 'World excl. China, South Korea, Japan and Singapore',\n",
       " 152: 'Austria',\n",
       " 153: 'Malta',\n",
       " 154: 'Rwanda',\n",
       " 155: 'South Sudan',\n",
       " 156: 'Egypt',\n",
       " 157: 'San Marino',\n",
       " 158: 'Upper middle income',\n",
       " 159: 'Singapore',\n",
       " 160: 'Israel',\n",
       " 161: 'Dominican Republic',\n",
       " 162: 'Canada',\n",
       " 163: 'Eritrea',\n",
       " 164: 'Djibouti',\n",
       " 165: 'Zimbabwe',\n",
       " 166: 'Malawi',\n",
       " 167: 'Low income',\n",
       " 168: 'Tunisia',\n",
       " 169: 'Estonia',\n",
       " 170: 'Sierra Leone',\n",
       " 171: 'Kenya',\n",
       " 172: 'Slovenia',\n",
       " 173: 'Pakistan',\n",
       " 174: 'Puerto Rico',\n",
       " 175: 'Liberia',\n",
       " 176: 'Turkey',\n",
       " 177: 'Libya',\n",
       " 178: 'Antigua and Barbuda',\n",
       " 179: 'Suriname',\n",
       " 180: 'Congo',\n",
       " 181: 'Ecuador',\n",
       " 182: 'Madagascar',\n",
       " 183: 'Costa Rica',\n",
       " 184: 'Gambia',\n",
       " 185: 'World excl. China and South Korea',\n",
       " 186: 'Zambia',\n",
       " 187: 'Nicaragua',\n",
       " 188: 'Bolivia',\n",
       " 189: 'Cyprus'}"
      ]
     },
     "execution_count": 56,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "l1=set()\n",
    "for ele in df.Entity:\n",
    "    l1.add(ele)\n",
    "l2={}\n",
    "l1=list(l1)\n",
    "for i in range(len(l1)):\n",
    "    l2[i]=l1[i]\n",
    "l2\n",
    "    \n",
    "    \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter the number assosciated with the country that you want to know.\n",
      "5\n",
      "Currently covid cases in India is 13387\n"
     ]
    }
   ],
   "source": [
    "print(\"Enter the number assosciated with the country that you want to know.\")\n",
    "n=int(input())\n",
    "y=df[df.Entity==l2[n]]\n",
    "print(\"Currently covid cases in \"+l2[n]+\" is \"+str(y.confirmedcases.iloc[-1]))\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Entity</th>\n",
       "      <th>Date</th>\n",
       "      <th>confirmedcases</th>\n",
       "      <th>Death</th>\n",
       "      <th>Unnamed: 4</th>\n",
       "      <th>Deathrate</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>3456</th>\n",
       "      <td>India</td>\n",
       "      <td>22-Jan-20</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>#DIV/0!</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3457</th>\n",
       "      <td>India</td>\n",
       "      <td>23-Jan-20</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>#DIV/0!</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3458</th>\n",
       "      <td>India</td>\n",
       "      <td>24-Jan-20</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>#DIV/0!</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3459</th>\n",
       "      <td>India</td>\n",
       "      <td>25-Jan-20</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>#DIV/0!</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3460</th>\n",
       "      <td>India</td>\n",
       "      <td>26-Jan-20</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>#DIV/0!</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3537</th>\n",
       "      <td>India</td>\n",
       "      <td>13-Apr-20</td>\n",
       "      <td>9152</td>\n",
       "      <td>486.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.053103147</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3538</th>\n",
       "      <td>India</td>\n",
       "      <td>14-Apr-20</td>\n",
       "      <td>10363</td>\n",
       "      <td>521.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.050275017</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3539</th>\n",
       "      <td>India</td>\n",
       "      <td>15-Apr-20</td>\n",
       "      <td>11438</td>\n",
       "      <td>559.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.04887218</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3540</th>\n",
       "      <td>India</td>\n",
       "      <td>16-Apr-20</td>\n",
       "      <td>12380</td>\n",
       "      <td>592.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.047819063</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3541</th>\n",
       "      <td>India</td>\n",
       "      <td>17-Apr-20</td>\n",
       "      <td>13387</td>\n",
       "      <td>605.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.045193098</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>86 rows × 6 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     Entity       Date  confirmedcases  Death  Unnamed: 4    Deathrate\n",
       "3456  India  22-Jan-20               0    0.0         NaN      #DIV/0!\n",
       "3457  India  23-Jan-20               0    0.0         NaN      #DIV/0!\n",
       "3458  India  24-Jan-20               0    0.0         NaN      #DIV/0!\n",
       "3459  India  25-Jan-20               0    0.0         NaN      #DIV/0!\n",
       "3460  India  26-Jan-20               0    0.0         NaN      #DIV/0!\n",
       "...     ...        ...             ...    ...         ...          ...\n",
       "3537  India  13-Apr-20            9152  486.0         NaN  0.053103147\n",
       "3538  India  14-Apr-20           10363  521.0         NaN  0.050275017\n",
       "3539  India  15-Apr-20           11438  559.0         NaN   0.04887218\n",
       "3540  India  16-Apr-20           12380  592.0         NaN  0.047819063\n",
       "3541  India  17-Apr-20           13387  605.0         NaN  0.045193098\n",
       "\n",
       "[86 rows x 6 columns]"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(y.Date, y.confirmedcases)\n",
    "plt.plot(y.Date, y.Death)\n",
    "plt.legend(['Confirmed cases',\"Death\"])\n",
    "plt.xlabel('Time')\n",
    "plt.ylabel(\"Number of people\")\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The top countries that are not suggested for students for their internship and placement are:\n",
      "Seychelles nan\n",
      "Maldives nan\n",
      "Italy 24114.0\n",
      "Poland nan\n",
      "South America nan\n",
      "India 605.0\n",
      "Kyrgyzstan nan\n",
      "Ghana 9.0\n",
      "Northern Mariana Islands nan\n",
      "Swaziland nan\n",
      "Turks and Caicos Islands nan\n",
      "Senegal nan\n",
      "Tanzania nan\n",
      "Switzerland nan\n",
      "Mali nan\n",
      "Saint Lucia nan\n",
      "Sao Tome and Principe nan\n",
      "Ukraine nan\n",
      "Malaysia nan\n",
      "Uruguay nan\n"
     ]
    }
   ],
   "source": [
    "l3={}\n",
    "for ele in l2.values():\n",
    "    y=df[df.Entity==ele]\n",
    "    \n",
    "    k=y.confirmedcases.iloc[-1]\n",
    "    l3[ele]=k\n",
    "l6={}\n",
    "for ele in l2.values():\n",
    "    y=df[df.Entity==ele]\n",
    "    \n",
    "    k=y.Death.iloc[-1]\n",
    "    l3[ele]=k\n",
    "    \n",
    "print(\"The top countries that are not suggested for students for their internship and placement are:\")    \n",
    "l4={k: v for k, v in sorted(l3.items(), key=lambda item: item[1], reverse=True)}\n",
    "i=0\n",
    "l5={}\n",
    "for o in l4 :\n",
    "    if(i<20):\n",
    "        print(o, l4[o])\n",
    "        i=i+1\n",
    "        l5[o]=l4[o]\n",
    "    else:\n",
    "        break"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "x=datetime.datetime(20,4,17)\n",
    "r=datetime.datetime(20,5,16)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "datetime.timedelta(days=29)"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "r-x"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
